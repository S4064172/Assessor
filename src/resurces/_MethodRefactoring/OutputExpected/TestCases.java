package TestCases;

import org.junit.BeforeClass;
// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
import TestCases.PO.*;

public class TestCases {

    @BeforeClass()
    public static void setup() {
        System.setProperty("webdriver.gecko.driver", "InsertGeckoPathHere");
    }

    private WebDriver driver;

    private Map<String, Object> vars;

    private JavascriptExecutor js;

    @Before
    public void setUp() {
        driver = new FirefoxDriver();
        js = (JavascriptExecutor) driver;
        vars = new HashMap<String, Object>();
    }

    @After
    public void tearDown() {
        driver.quit();
    }

    @Test
    public void testBackToFather() {
        Login _Login = new Login(driver, js, vars);
        _Login.TEST1("admin@example.com", "com", "com", null, false);
    }

    @Test
    public void testNoBackToFather() {
        Login _Login = new Login(driver, js, vars);
        _Login.TEST2("admin@example.com", "com");
    }

    @Test
    public void testNoBackToFather_assert_end() {
        Login _Login = new Login(driver, js, vars);
        _Login.TEST1(null, null, null, "admin@example.com", true);
        assertThat(_Login.set_CSSSELECTOR_logo_lg(), is("Kimai - Time Tracking"));
    }

    @Test
    public void testNoBackToFather_assert_in() {
        Login _Login = new Login(driver, js, vars);
        _Login.TEST1(null, null, null, "admin@example.com", false);
        assertThat(_Login.set_CSSSELECTOR_logo_lg(), is("Kimai - Time Tracking"));
        _Login.inner2_1("com");
    }

    @Test
    public void testNoBackToFather_assert_start() {
        Login _Login = new Login(driver, js, vars);
        _Login.TEST1(null, null, null, null, true);
        assertThat(_Login.set_CSSSELECTOR_logo_lg(), is("Kimai - Time Tracking"));
        _Login.ineer1_1("admin@example.com");
    }
}
